# Auto-generated by TorchCanvas Code Export
import torch
import torch.nn as nn
from .blocks import GRUBlock

class ExportedModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv = nn.LazyConv1d(64, 5, stride=1, padding=5 // 2, bias=True)
        self.relu = nn.ReLU(inplace=True)
        # Permute_BCT_to_BTH 'perm' has no parameters
        self.gru = GRUBlock(hidden_size=128, num_layers=1, bidirectional=True, out='last')
        self.fc = nn.LazyLinear(18, bias=True)

    def forward(self, inputs: dict):
        cache = {}
        cache['inp'] = inputs['inp']
        cache['conv'] = self.conv(cache['inp'])
        cache['relu'] = self.relu(cache['conv'])
        cache['perm'] = cache['relu'].transpose(1, 2).contiguous()
        cache['gru'] = self.gru(cache['perm'])
        cache['fc'] = self.fc(cache['gru'])
        return cache['fc']
